

module integer_operations where


  --open import Relation.Binary.PropositionalEquality as Eq
  --open Eq using ( _‚â°_  ; refl ; sym ; cong)
  open import Relation.Nullary.Decidable using (False ; True ; isYes ; isNo ; ‚åä_‚åã )
  open import Data.Bool as Bool renaming (Bool to ùîπ) using ( true ; false) 
  open import Data.Integer as Int using (‚Ñ§ ; _+_ ; _-_ ; _*_ )
  open import Data.Integer.Base using (‚à£_‚à£ )  
  open import Data.Integer.DivMod using ( _div_ ; _mod_ )
  open import Data.List as List using (List; _‚à∑_; [] ; map ; _++_ )
  open import Data.String.Properties using (_‚âà?_)
  open import Data.Nat as ‚Ñï renaming (_+_ to _‚äï_ ; _*_ to _‚äõ_ ) using (‚Ñï; zero; suc; _‚à∏_; _‚â§_; pred ; _‚âü_ ; _‚â§?_)
  open import Data.Maybe using (Maybe)
  open import Data.Maybe.Categorical as C‚Çò
  --open import Data.Maybe.Relation.Binary.Pointwise using (Pointwise ; drop-just)
  open import Data.Product renaming (_,_ to _‚àß_  )

  open Maybe
  open ‚Ñ§


  open import Agda.Builtin.Unit
  open import Data.Empty using (‚ä•)


  open import operators  -- (categorical operators)
  -- examples of use:
  maybeAdd : Maybe ‚Ñ§ ‚Üí Maybe ‚Ñ§ ‚Üí Maybe ‚Ñ§
  maybeAdd x y = (_+_) <$>‚Çò  x ‚äõ‚Çò  y

  maybeAdd' : Maybe ‚Ñ§ ‚Üí Maybe ‚Ñ§ ‚Üí Maybe ‚Ñ§
  maybeAdd' x y = (_+_) <$>‚ü® C‚Çò.functor ‚ü© x ‚äõ‚ü® C‚Çò.applicative ‚ü© y


  pattern [_] z = z ‚à∑ []
  pattern [_,_] y z = y ‚à∑ z ‚à∑ []
  pattern [_,_,_] x y z = x ‚à∑ y ‚à∑ z ‚à∑ []
  pattern [_,_,_,_] w x y z = w ‚à∑ x ‚à∑ y ‚à∑ z ‚à∑ []
  pattern [_,_,_,_,_] v w x y z = v ‚à∑ w ‚à∑ x ‚à∑ y ‚à∑ z ‚à∑ []
  pattern [_,_,_,_,_,_] u v w x y z = u ‚à∑ v ‚à∑ w ‚à∑ x ‚à∑ y ‚à∑ z ‚à∑ []

  data OpName : Set where

       Or :  OpName

       And : OpName

       Eq : OpName

       Leq : OpName
       Less : OpName
       Geq : OpName
       Greater : OpName

       Add : OpName
       Sub : OpName

       Mul : OpName
       Div : OpName
       Mod : OpName
       not : OpName

  ‚Ñ§Bool : ‚Ñ§ ‚Üí ‚Ñ§
  ‚Ñ§Bool (negsuc _) = pos 0 
  ‚Ñ§Bool (pos n)    = pos (‚ÑïBool n)
    where
    ‚ÑïBool : ‚Ñï ‚Üí ‚Ñï
    ‚ÑïBool ‚Ñï.zero = 0
    ‚ÑïBool  n     = 1

  
  is-pos : ‚Ñ§ ‚Üí ‚Ñ§
  is-pos (pos    _) = pos 1
  is-pos (negsuc _) = pos 0

  opEval : OpName ‚Üí List ( Maybe ‚Ñ§ ) ‚Üí Maybe ‚Ñ§
  opEval Or  [ x , y ]  =   or‚Ñ§ <$>‚Çò  x ‚äõ‚Çò y
    where
    or‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
    or‚Ñ§ (pos 0) (pos 0) = pos 0
    or‚Ñ§ (pos n)    _    = pos 1
    or‚Ñ§   _    (pos n)  = pos 1
    or‚Ñ§   _     _       = pos 0
  opEval And  [ x ,  y ]  = and‚Ñ§ <$>‚Çò x ‚äõ‚Çò y
    where
    and‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
    and‚Ñ§ (pos 0)  _      = pos 0
    and‚Ñ§  _      (pos 0) = pos 0
    and‚Ñ§ (pos _) (pos _) = pos 1
    and‚Ñ§  _       _      = pos 0
  opEval Eq   [ x , y  ]       = eq‚Ñ§ <$>‚Çò x ‚äõ‚Çò y
    where
    is-zero : ‚Ñ§ ‚Üí ‚Ñ§
    is-zero (pos 0) = pos 1
    is-zero    _    = pos 0
    eq‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
    eq‚Ñ§   x   y = is-zero (x - y)
  opEval Leq  [ x , y ]      = leq‚Ñ§ <$>‚Çò x ‚äõ‚Çò y -- x ‚â§ y
    where
    is-neg : ‚Ñ§ ‚Üí ‚Ñ§
    is-neg (negsuc _) = pos 1
    is-neg (pos    _) = pos 0
    leq‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
    leq‚Ñ§   x   y = is-neg ((x - y) - (pos 1))
  opEval Less   [ x , y ]     = less‚Ñ§ <$>‚Çò x ‚äõ‚Çò y -- x < y
    where
    is-neg : ‚Ñ§ ‚Üí ‚Ñ§
    is-neg (negsuc _) = pos 1
    is-neg (pos    _) = pos 0
    less‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
    less‚Ñ§   x   y = is-neg (x - y)
  opEval Geq  [ x , y ]    = geq‚Ñ§ <$>‚Çò x ‚äõ‚Çò y  -- x ‚â• y
    where
    geq‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
    geq‚Ñ§   x   y = is-pos (x - y)
  opEval Greater [ x , y ]     = greater‚Ñ§ <$>‚Çò x ‚äõ‚Çò y -- x > y
    where
    greater‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
    greater‚Ñ§   x   y = is-pos ((x - y) - (pos 1))
  opEval Add  [ x , y ]  = (_+_)   <$>‚Çò x ‚äõ‚Çò y
  opEval Sub  [ x , y ]  = (_-_)   <$>‚Çò x ‚äõ‚Çò y
  opEval Mul  [ x , y ]  = (_*_)   <$>‚Çò x ‚äõ‚Çò y
  opEval Div  [ x , y ]  = (maybeDiv y)  ‚äõ‚Çò x 
    where
    maybe‚â¢0 : (z : ‚Ñ§) ‚Üí  Maybe ( False ( ‚à£ z ‚à£ ‚Ñï.‚âü 0) )
    maybe‚â¢0 (pos ‚Ñï.zero)         = nothing
    maybe‚â¢0 (Int.+[1+ n ])       = just (tt)
    maybe‚â¢0 (negsuc n)           = just (tt)
    maybeDiv : Maybe ‚Ñ§ ‚Üí Maybe (‚Ñ§ ‚Üí ‚Ñ§)
    maybeDiv nothing = nothing
    maybeDiv (just divisor) = (Œª p ‚Üí (Œª z‚ÇÅ ‚Üí (z‚ÇÅ div divisor) {p} )) <$>‚Çò (maybe‚â¢0 divisor)
  opEval Mod  [ x , y ]  = (maybeMod y)  ‚äõ‚Çò x 
    where
    maybe‚â¢0 : (z : ‚Ñ§) ‚Üí  Maybe ( False ( ‚à£ z ‚à£ ‚Ñï.‚âü 0) )
    maybe‚â¢0 (pos ‚Ñï.zero)         = nothing
    maybe‚â¢0 (Int.+[1+ n ])       = just (tt)
    maybe‚â¢0 (negsuc n)           = just (tt)
    maybeMod : Maybe ‚Ñ§ ‚Üí Maybe (‚Ñ§ ‚Üí ‚Ñ§)
    maybeMod nothing = nothing
    maybeMod (just divisor) = (Œª p ‚Üí (Œª z‚ÇÅ ‚Üí pos ((z‚ÇÅ mod divisor) {p}))) <$>‚Çò (maybe‚â¢0 divisor)
  opEval Not  [ x ]      = x >>=‚Çò not‚Ñ§ 
    where
    not‚Ñ§ : ‚Ñ§ ‚Üí Maybe ‚Ñ§
    not‚Ñ§ (pos ‚Ñï.zero) = just (pos 1)
    not‚Ñ§ Int.+[1+ ‚Ñï.zero ] = just (pos 0)
    not‚Ñ§ Int.+[1+ ‚Ñï.suc n ] = nothing
    not‚Ñ§ (negsuc n) = nothing
  opEval _     _           = nothing
